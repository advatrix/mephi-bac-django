# Generated by Django 4.0.3 on 2022-04-11 06:41

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0011_alter_notificationtotargetgroup_unique_together_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('title', models.TextField()),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'notification',
            },
        ),
        migrations.CreateModel(
            name='NotificationGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'notification_group',
            },
        ),
        migrations.CreateModel(
            name='NotificationToUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='notifications.notification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='users.user')),
            ],
            options={
                'db_table': 'notification_to_user',
                'unique_together': {('notification', 'user')},
            },
        ),
        migrations.CreateModel(
            name='NotificationToNotificationGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='notifications.notification')),
                ('notification_group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='notifications.notificationgroup')),
            ],
            options={
                'db_table': 'notification_to_notification_group',
                'unique_together': {('notification', 'notification_group')},
            },
        ),
        migrations.AddField(
            model_name='notification',
            name='notification_groups',
            field=models.ManyToManyField(blank=True, null=True, through='notifications.NotificationToNotificationGroup', to='notifications.notificationgroup'),
        ),
        migrations.AddField(
            model_name='notification',
            name='users',
            field=models.ManyToManyField(blank=True, null=True, through='notifications.NotificationToUser', to='users.user'),
        ),
        migrations.CreateModel(
            name='UserToNotificationGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('notification_group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='notifications.notificationgroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='users.user')),
            ],
            options={
                'db_table': 'user_to_notification_group',
                'unique_together': {('user', 'notification_group')},
            },
        ),
        migrations.RunSQL(
            sql="""
            BEGIN;
            
            CREATE OR REPLACE FUNCTION insert_notification_to_user() RETURNS TRIGGER AS $insert_notification_to_user$
            BEGIN
                INSERT INTO "notification_to_user" (
                    is_read,
                    created,
                    updated,
                    notification_id,
                    user_id
                ) SELECT
                    false,
                    current_timestamp,
                    current_timestamp,
                    new.notification_id,
                    utng.user_id
                FROM "user_to_notification_group" utng
                WHERE utng.notification_group_id = new.notification_group_id;
                RETURN null;
            END;
            $insert_notification_to_user$ LANGUAGE plpgsql;
            
            CREATE TRIGGER insert_notification_to_user
            AFTER INSERT ON notification_to_notification_group
            FOR EACH ROW EXECUTE FUNCTION insert_notification_to_user();
            
            CREATE OR REPLACE FUNCTION delete_notification_to_user() RETURNS TRIGGER AS $delete_notification_to_user$
            BEGIN
                DELETE FROM "notification_to_user" ntu
                USING "user_to_notification_group" utng
                WHERE ntu.user_id = utng.user_id
                    AND utng.notification_group_id = old.notification_group_id;
                RETURN old;
            END;
            $delete_notification_to_user$ LANGUAGE plpgsql;
            
            CREATE TRIGGER delete_notification_to_user
            BEFORE DELETE ON notification_to_notification_group
            FOR EACH ROW EXECUTE FUNCTION delete_notification_to_user();
            
            COMMIT;
            """,
            reverse_sql="""
            BEGIN;
            DROP TRIGGER IF EXISTS delete_notification_to_user ON notification_to_notification_group;
            DROP FUNCTION IF EXISTS delete_notification_to_user();
            DROP TRIGGER IF EXISTS insert_notification_to_user ON notification_to_notification_group;
            DROP FUNCTION IF EXISTS insert_notification_to_user();
            COMMIT;
            """
        )
    ]
